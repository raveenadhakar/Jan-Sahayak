// Enhanced Weather Service with location-based data
class WeatherService {
  constructor() {
    this.apiKey = import.meta.env.VITE_WEATHER_API_KEY;
    this.baseUrl = 'https://api.openweathermap.org/data/2.5';
    this.isEnabled = !!this.apiKey;
  }

  // Get weather for user's location
  async getLocationWeather(state, district, village) {
    if (!this.isEnabled) {
      return this.getMockWeatherData(district || 'Muzaffarnagar');
    }

    try {
      // First get coordinates for the location
      const location = `${village}, ${district}, ${state}, India`;
      const geoResponse = await fetch(
        `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(location)}&limit=1&appid=${this.apiKey}`
      );
      
      if (!geoResponse.ok) {
        throw new Error('Location not found');
      }
      
      const geoData = await geoResponse.json();
      if (geoData.length === 0) {
        throw new Error('Location coordinates not found');
      }

      const { lat, lon } = geoData[0];

      // Get current weather
      const weatherResponse = await fetch(
        `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=metric&lang=hi`
      );

      if (!weatherResponse.ok) {
        throw new Error('Weather data not available');
      }

      const weatherData = await weatherResponse.json();

      // Get forecast
      const forecastResponse = await fetch(
        `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=metric&lang=hi`
      );

      const forecastData = forecastResponse.ok ? await forecastResponse.json() : null;

      return this.formatWeatherData(weatherData, forecastData, district);
    } catch (error) {
      console.error('Weather API error:', error);
      return this.getMockWeatherData(district || 'Muzaffarnagar');
    }
  }

  // Format weather data for display
  formatWeatherData(current, forecast, location) {
    const weatherConditions = {
      'clear sky': { hi: 'рд╕рд╛рдл рдЖрд╕рдорд╛рди', icon: 'тШАя╕П', advice: 'рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рджрд┐рди рд╣реИред' },
      'few clouds': { hi: 'рд╣рд▓реНрдХреЗ рдмрд╛рджрд▓', icon: 'ЁЯМдя╕П', advice: 'рдореМрд╕рдо рд╕реБрд╣рд╛рд╡рдирд╛ рд╣реИред' },
      'scattered clouds': { hi: 'рдмрд┐рдЦрд░реЗ рдмрд╛рджрд▓', icon: 'тЫЕ', advice: 'рдмрд╛рджрд▓ рдЫрд╛рдП рд╣реБрдП рд╣реИрдВред' },
      'broken clouds': { hi: 'рдШрдиреЗ рдмрд╛рджрд▓', icon: 'тШБя╕П', advice: 'рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред' },
      'shower rain': { hi: 'рдмреМрдЫрд╛рд░реЗрдВ', icon: 'ЁЯМжя╕П', advice: 'рдлрд╕рд▓реЛрдВ рдХреЛ рдкрд╛рдиреА рдорд┐рд▓реЗрдЧрд╛ред' },
      'rain': { hi: 'рдмрд╛рд░рд┐рд╢', icon: 'ЁЯМзя╕П', advice: 'рдмрд╛рд░рд┐рд╢ рд╣реЛ рд░рд╣реА рд╣реИ, рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВред' },
      'thunderstorm': { hi: 'рддреВрдлрд╛рди', icon: 'тЫИя╕П', advice: 'рддреВрдлрд╛рди рдХреА рдЪреЗрддрд╛рд╡рдиреА, рдШрд░ рдореЗрдВ рд░рд╣реЗрдВред' },
      'snow': { hi: 'рдмрд░реНрдл', icon: 'тЭДя╕П', advice: 'рдардВрдб рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВред' },
      'mist': { hi: 'рдХреЛрд╣рд░рд╛', icon: 'ЁЯМля╕П', advice: 'рдзреБрдВрдз рд╣реИ, рд╕рд╛рд╡рдзрд╛рдиреА рд╕реЗ рдЪрд▓реЗрдВред' }
    };

    const condition = current.weather[0].description.toLowerCase();
    const weatherInfo = weatherConditions[condition] || {
      hi: current.weather[0].description,
      icon: 'ЁЯМдя╕П',
      advice: 'рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдЦреЗрдВред'
    };

    return {
      location: location,
      current: {
        temperature: Math.round(current.main.temp),
        feelsLike: Math.round(current.main.feels_like),
        humidity: current.main.humidity,
        windSpeed: Math.round(current.wind.speed * 3.6), // Convert m/s to km/h
        pressure: current.main.pressure,
        visibility: current.visibility ? Math.round(current.visibility / 1000) : null,
        condition: weatherInfo.hi,
        conditionEn: current.weather[0].description,
        icon: weatherInfo.icon,
        advice: weatherInfo.advice,
        sunrise: new Date(current.sys.sunrise * 1000).toLocaleTimeString('hi-IN', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }),
        sunset: new Date(current.sys.sunset * 1000).toLocaleTimeString('hi-IN', { 
          hour: '2-digit', 
          minute: '2-digit' 
        })
      },
      forecast: forecast ? this.formatForecast(forecast.list.slice(0, 5)) : [],
      alerts: this.generateWeatherAlerts(current),
      farmingAdvice: this.getFarmingAdvice(current, location)
    };
  }

  // Format forecast data
  formatForecast(forecastList) {
    return forecastList.map(item => ({
      time: new Date(item.dt * 1000).toLocaleTimeString('hi-IN', { 
        hour: '2-digit', 
        minute: '2-digit' 
      }),
      temperature: Math.round(item.main.temp),
      condition: item.weather[0].description,
      icon: this.getWeatherIcon(item.weather[0].main),
      humidity: item.main.humidity,
      windSpeed: Math.round(item.wind.speed * 3.6)
    }));
  }

  // Generate weather alerts
  generateWeatherAlerts(current) {
    const alerts = [];
    
    if (current.main.temp > 40) {
      alerts.push({
        type: 'heat',
        message: 'рдЕрддреНрдпрдзрд┐рдХ рдЧрд░реНрдореА рдХреА рдЪреЗрддрд╛рд╡рдиреА - рдкрд╛рдиреА рдкрд┐рдПрдВ рдФрд░ рдЫрд╛рдпрд╛ рдореЗрдВ рд░рд╣реЗрдВ',
        priority: 'high',
        icon: 'ЁЯФе'
      });
    }
    
    if (current.main.temp < 5) {
      alerts.push({
        type: 'cold',
        message: 'рдардВрдб рдХреА рдЪреЗрддрд╛рд╡рдиреА - рдЧрд░реНрдо рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ',
        priority: 'high',
        icon: 'ЁЯе╢'
      });
    }
    
    if (current.wind.speed > 10) {
      alerts.push({
        type: 'wind',
        message: 'рддреЗрдЬрд╝ рд╣рд╡рд╛ рдЪрд▓ рд░рд╣реА рд╣реИ - рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ',
        priority: 'medium',
        icon: 'ЁЯТи'
      });
    }
    
    if (current.main.humidity > 80) {
      alerts.push({
        type: 'humidity',
        message: 'рдЙрдорд╕ рднрд░рд╛ рдореМрд╕рдо - рдкрд╛рдиреА рдкрд┐рдПрдВ',
        priority: 'low',
        icon: 'ЁЯТз'
      });
    }

    return alerts;
  }

  // Get farming advice based on weather
  getFarmingAdvice(current, location) {
    const temp = current.main.temp;
    const humidity = current.main.humidity;
    const condition = current.weather[0].main.toLowerCase();
    
    let advice = [];
    
    if (condition.includes('rain')) {
      advice.push('ЁЯМзя╕П рдмрд╛рд░рд┐рд╢ рд╣реЛ рд░рд╣реА рд╣реИ - рдлрд╕рд▓ рдХреА рдХрдЯрд╛рдИ рд╕реНрдердЧрд┐рдд рдХрд░реЗрдВ');
      advice.push('ЁЯТз рдкрд╛рдиреА рднрд░рд╛рд╡ рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВ');
    } else if (temp > 35) {
      advice.push('тШАя╕П рдЕрдзрд┐рдХ рдЧрд░реНрдореА - рдлрд╕рд▓реЛрдВ рдХреЛ рдкрд╛рдиреА рджреЗрдВ');
      advice.push('ЁЯМ╛ рджреЛрдкрд╣рд░ рдореЗрдВ рдЦреЗрдд рдореЗрдВ рдХрд╛рдо рди рдХрд░реЗрдВ');
    } else if (temp < 15) {
      advice.push('тЭДя╕П рдардВрдб - рдлрд╕рд▓реЛрдВ рдХреЛ рдврдХреЗрдВ');
      advice.push('ЁЯФе рдкрд╛рд▓рд╛ рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВ');
    } else {
      advice.push('ЁЯМ▒ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рдореМрд╕рдо рд╣реИ');
      advice.push('ЁЯЪЬ рдЦреЗрдд рдХреЗ рдХрд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ');
    }
    
    if (humidity > 70) {
      advice.push('ЁЯжа рдирдореА рдЕрдзрд┐рдХ - рдлрд╕рд▓ рдореЗрдВ рдмреАрдорд╛рд░реА рдХрд╛ рдЦрддрд░рд╛');
    }
    
    return advice;
  }

  // Get weather icon
  getWeatherIcon(condition) {
    const icons = {
      'Clear': 'тШАя╕П',
      'Clouds': 'тШБя╕П',
      'Rain': 'ЁЯМзя╕П',
      'Drizzle': 'ЁЯМжя╕П',
      'Thunderstorm': 'тЫИя╕П',
      'Snow': 'тЭДя╕П',
      'Mist': 'ЁЯМля╕П',
      'Fog': 'ЁЯМля╕П',
      'Haze': 'ЁЯМля╕П'
    };
    return icons[condition] || 'ЁЯМдя╕П';
  }

  // Mock weather data for fallback
  getMockWeatherData(location) {
    const mockData = {
      'Muzaffarnagar': {
        temp: 28, humidity: 65, wind: 12, condition: 'рд╕рд╛рдл рдЖрд╕рдорд╛рди',
        advice: 'рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рджрд┐рди рд╣реИред'
      },
      'Shamli': {
        temp: 26, humidity: 70, wind: 8, condition: 'рд╣рд▓реНрдХреЗ рдмрд╛рджрд▓',
        advice: 'рдореМрд╕рдо рд╕реБрд╣рд╛рд╡рдирд╛ рд╣реИред'
      },
      'Baghpat': {
        temp: 29, humidity: 60, wind: 10, condition: 'рд╕рд╛рдл рдЖрд╕рдорд╛рди',
        advice: 'рдЦреЗрдд рдХреЗ рдХрд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред'
      },
      'Meerut': {
        temp: 31, humidity: 55, wind: 15, condition: 'рдзреВрдк',
        advice: 'рдЧрд░реНрдореА рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВред'
      }
    };

    const data = mockData[location] || mockData['Muzaffarnagar'];
    
    return {
      location: location,
      current: {
        temperature: data.temp,
        feelsLike: data.temp + 2,
        humidity: data.humidity,
        windSpeed: data.wind,
        pressure: 1013,
        condition: data.condition,
        conditionEn: 'Clear',
        icon: 'тШАя╕П',
        advice: data.advice,
        sunrise: '06:30',
        sunset: '18:45'
      },
      forecast: [
        { time: '12:00', temperature: data.temp + 3, condition: data.condition, icon: 'тШАя╕П' },
        { time: '15:00', temperature: data.temp + 5, condition: data.condition, icon: 'тШАя╕П' },
        { time: '18:00', temperature: data.temp + 1, condition: data.condition, icon: 'ЁЯМдя╕П' },
        { time: '21:00', temperature: data.temp - 2, condition: 'рд╕рд╛рдл', icon: 'ЁЯМЩ' }
      ],
      alerts: data.temp > 35 ? [{
        type: 'heat',
        message: 'рдЧрд░реНрдореА рдХреА рдЪреЗрддрд╛рд╡рдиреА',
        priority: 'medium',
        icon: 'ЁЯФе'
      }] : [],
      farmingAdvice: [data.advice, 'ЁЯМ╛ рдлрд╕рд▓ рдХреА рджреЗрдЦрднрд╛рд▓ рдХрд░реЗрдВ']
    };
  }
}

export const weatherService = new WeatherService();